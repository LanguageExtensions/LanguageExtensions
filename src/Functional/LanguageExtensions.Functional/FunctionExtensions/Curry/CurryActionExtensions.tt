<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
string namespaceToUse = "LanguageExtensions.Functional";
string staticClassName = "CurryActionExtensions";
int funcVariations = 15;
#>
using System;
using System.Diagnostics.Contracts;

namespace <#= namespaceToUse #>
{
    public static partial class <#= staticClassName #>
    {<# 
    for(int i = 2; i<funcVariations + 2; i++) { 
    Func<string, string, string> formatText = (separater, prifix) =>  string.Join(separater, Enumerable.Range(1, i).Select(k => $"{prifix}{k}")); 
    string functionInput = formatText(", ", "value");
    string functionChain = formatText(" => ", "value");
    string functionAggregationResult = Enumerable.Range(1, i).Reverse().Skip(1).Aggregate($"Action<T{i}>", (input, current) => $"Func<T{current}, {input}>");
    #>
    
        /// <summary>
        /// Transform (<#= functionInput #>) => { }
        /// to <#= functionChain #> => { }
        /// </summary>
        [Pure]
        public static <#= functionAggregationResult #> Curry<<#= formatText(", ", "T") #>>(
            this Action<<#= formatText(", ", "T") #>> action) =>
                <#= functionChain #> => action(<#= functionInput #>);
    <# } #>}
}